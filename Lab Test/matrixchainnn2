#include <iostream>
#include <vector>
#include <climits>

using namespace std;

// Function to find the minimum number of scalar multiplications and optimal parenthesization
void matrixChainOrder(const vector<int>& dimensions) {
    int n = dimensions.size() - 1; // Number of matrices in the sequence
    vector<vector<int>> M(n, vector<int>(n, 0)); // Memoization table for minimum multiplications
    vector<vector<int>> S(n, vector<int>(n, 0)); // Splitting point table

    // Initialize the memoization table
    for (int len = 2; len <= n; ++len) {
        for (int i = 0; i <= n - len; ++i) {
            int j = i + len - 1;
            M[i][j] = INT_MAX;

            for (int k = i; k < j; ++k) {
                int cost = M[i][k] + M[k + 1][j] + dimensions[i] * dimensions[k + 1] * dimensions[j + 1];
                if (cost < M[i][j]) {
                    M[i][j] = cost;
                    S[i][j] = k; // Record the split point
                }
            }
        }
    }

    // Print the minimum number of multiplications
    cout << "Minimum number of scalar multiplications: " << M[0][n - 1] << endl;

    // Print the optimal parenthesization
    cout << "Optimal parenthesization: ";
    // Helper function to print the optimal parenthesization
    function<void(int, int)> printOptimalParenthesization = [&](int i, int j) {
        if (i == j) {
            cout << "A" << i + 1;
        } else {
            cout << "(";
            printOptimalParenthesization(i, S[i][j]);
            cout << "*";
            printOptimalParenthesization(S[i][j] + 1, j);
            cout << ")";
        }
    };

    printOptimalParenthesization(0, n - 1);
    cout << endl;
}

int main() {
    vector<int> dimensions = {30, 35, 15, 5, 10, 20, 25}; // Example dimensions of matrices
    matrixChainOrder(dimensions);
    return 0;
}
